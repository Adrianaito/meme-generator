{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImage","allMemeImg","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAceA,MAZf,WACE,OACE,mCACE,qBACAC,IAAI,iEACJC,IAAI,aAEJ,mD,cCyDSC,E,kDA/Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,WAAY,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,qDAYd,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACVE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAACV,WAAYQ,S,0BAIjC,SAAaG,GAAQ,IAAD,EACIA,EAAMC,OAArBC,EADW,EACXA,KAAMC,EADK,EACLA,MACbC,KAAKL,SAAL,eAAiBG,EAAOC,M,0BAE1B,SAAaH,GACXA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,WAAWqB,QAC3DC,EAAcP,KAAKnB,MAAMI,WAAWiB,GAASM,IACnDR,KAAKL,SAAS,CACZX,YAAauB,M,oBAIjB,WACE,OACE,gCACE,uBAAME,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACE,uBAAOuB,KAAK,OACZb,KAAK,UACLc,YAAY,WACZb,MAAOC,KAAKnB,MAAMC,QAClB+B,SAAUb,KAAKd,eAEf,uBAAOyB,KAAK,OACZb,KAAK,aACLc,YAAY,cACZb,MAAOC,KAAKnB,MAAME,WAClB8B,SAAUb,KAAKd,eAEf,4CAGA,sBAAKuB,UAAU,OAAf,UACE,qBAAK/B,IAAKsB,KAAKnB,MAAMG,YAAaL,IAAI,KACtC,oBAAI8B,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GAzDnB+B,IAAMC,WCuBnBC,E,kDAjBb,aAAe,IAAD,8BACZ,gBACKnC,MAAQ,GAFD,E,0CAOd,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,W,GAZUiC,IAAMC,WCKTE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.00788c34.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n  return (\n    <header>\n      <img\n      src='http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png'\n      alt='Problem?'\n      />\n      <p>Meme Generator</p>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      topText: '',\n      bottomText: '',\n      randomImage: 'http://i.imgflip.com/1bij.jpg',\n      allMemeImg: []\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n        const {memes} = response.data\n        this.setState({allMemeImg: memes})\n      })\n  }\n\n  handleChange(event) {\n    const {name, value} = event.target\n    this.setState({ [name]: value })\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    const randNum = Math.floor(Math.random() * this.state.allMemeImg.length)\n    const randMemeImg = this.state.allMemeImg[randNum].url\n    this.setState({\n      randomImage: randMemeImg\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <form className='meme-form' onSubmit={this.handleSubmit}>\n          <input type='text'\n          name='topText'\n          placeholder='Top Text'\n          value={this.state.topText}\n          onChange={this.handleChange}\n          />\n          <input type='text'\n          name='bottomText'\n          placeholder='Bottom Text'\n          value={this.state.bottomText}\n          onChange={this.handleChange}\n          />\n          <button>Gen</button>\n\n        </form>\n          <div className='meme'>\n            <img src={this.state.randomImage} alt=''/>\n            <h2 className='top'>{this.state.topText}</h2>\n            <h2 className='bottom'>{this.state.bottomText}</h2>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default MemeGenerator\n","\nimport './App.css';\nimport React from 'react';\n\nimport Header from './components/Header'\nimport MemeGenerator from './components/MemeGenerator'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header/>\n        <MemeGenerator />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}